id94:~/workspace/MaaS/client (develop) $ gulp build
[14:28:55] Using gulpfile ~/workspace/MaaS/client/gulpfile.js
[14:28:55] Starting 'clean'...
[14:28:55] Starting 'build'...

    at finishMaybe (/home/ubuntu/workspace/MaaS/node_modules/browserify/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_writable.js:475:14)
    at endWritable (/home/ubuntu/workspace/MaaS/node_modules/browserify/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_writable.js:485:3)
    at ConcatStream.Writable.end (/home/ubuntu/workspace/MaaS/node_modules/browserify/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_writable.js:455:41)
    at DuplexWrapper.onend (/home/ubuntu/workspace/MaaS/node_modules/browserify/node_modules/readable-stream/lib/_stream_readable.js:507:10)


















/* --------------- VENDOR BUNDLE ----------------- */
gulp.task('vendor', function() {
    var production = (process.env.NODE_ENV === 'production');
    // A dummy entry point for browserify
    var stream = gulp.src('./gulp/noop.js', {read: false})
        // Browserify it
        .pipe(browserify({
            debug: false,  // Don't provide source maps for vendor libs
        }))

        .on('prebundle', function(bundle) {
            // Require vendor libraries and make them available outside the bundle.
            libs.forEach(function(lib) {
                bundle.require(lib);
            });
        });
        
        /*if (production) {
            // If this is a production build, minify it
            stream.pipe(uglify());
        }*/

    // Give the destination file a name, adding '.min' if this is production
    stream.pipe(source(p.bundleVendor))    //(rename('vendor' + (production ? '.min' : '') + '.js'))

    // Save to the build directory
    .pipe(gulp.dest(p.distJs));     //gulp.dest('build/')

  return stream;

});

exports.libs = libs;

/* --------------- APPLICATION BUNDLE ----------------- */
//require('./vendor').libs.

gulp.task('app', function() {
    var production = (process.env.NODE_ENV === 'production');

    var stream = gulp.src('src/index.js', {read: false})
    // Browserify it
        .pipe(browserify({
            debug: !production,  // If not production, add source maps
            transform: ['reactify'],
            extensions: ['.jsx']
        }))
        
        .on('prebundle', function(bundle) {
            // The following requirements are loaded from the vendor bundle
            libs.forEach(function(lib) {
                bundle.external(lib);
            });
        });

        /*if (production) {
            // If this is a production build, minify it
            stream.pipe(uglify());
        }*/

        // Give the destination file a name, adding '.min' if this is production
        stream.pipe(source(p.bundleApp))   //(rename(pkg.name + (production ? '.min' : '') + '.js'))

        // Save to the build directory
        .pipe(gulp.dest('build/'));

    return stream;
});


/* ---------------------------------------------------- */